# Variables for Core Modules

# Variables for JSON Utils
- `raw` (str): Raw input string representing possible JSON.
- `result` (dict): Parsed output dictionary from safe_json_parse.

# Variables for Models (models.py)
- `id` (int): Primary key for Task, PluginExecution, and MemoryLedger.
- `description` (str): Description of the task (Task).
- `model_used` (str): Model used to generate code (Task).
- `generated_code` (str|None): Output code from model (Task).
- `status` (str): Task or plugin execution status.
- `error_message` (str|None): Error message if execution fails.
- `created_at` (datetime): Timestamp when entry was created.
- `completed_at` (datetime|None): When task or plugin finished.
- `plugin_name` (str): Name of executed plugin (PluginExecution).
- `input_data` (dict): JSON input to plugin (PluginExecution).
- `output_data` (dict|None): JSON output from plugin (PluginExecution).
- `timestamp` (datetime): Timestamp for MemoryLedger entries.
- `context_type` (str): What type of context (task/plugin/note).
- `related_id` (int|None): Foreign key to related task or plugin.
- `content` (str): Log content for memory entry.

# Variables for Main (main.py)
- `app` (FastAPI): Main FastAPI application instance.
- `allowed_origins` (List[str]): CORS whitelist domains.

# Variables for Echo Plugin (echo.py)
- `input_spec` (dict): Schema definition for plugin input fields.

# Variables for Plugin Loader (loader.py)
- `mem_limit` (int): Max memory allocation for plugin subprocesses in bytes.
- `plugins` (List[dict]): Discovered plugin metadata list.
- `filename` (str): Python file name of target plugin.
- `plugin_path` (str): Absolute path to plugin file.
- `module` (ModuleType): Dynamically imported plugin module.
- `runner_path` (str): Path to the runner script used for subprocess exec.
- `env` (dict): Environment vars passed to the subprocess.
- `existing_path` (str): Prior PYTHONPATH, before patching.
- `path` (str): File path during discovery loop.
- `attr` (Any): Attribute introspected from plugin module.
- `plugin_dir` (str): Root directory of all plugins.
- `signal_num` (int): Signal number if plugin terminated by signal.
- `stderr` (str): Captured stderr from plugin subprocess.

# Variables for Plugin Runner (runner.py)
- `logger` (Logger): Logger instance for subprocess execution.
- `db` (Session): Database session instance used in runner context.

# Variables for Plugin Logger (logger.py)
- `db` (Session): Database session used to log plugin execution.

# Variables for Ollama Healthcheck (ollama_healthcheck.py)
- `response` (Response): HTTP response object from model listing.
- `model_names` (List[str]): Extracted names of models returned by Ollama.

# Variables for Monitor (monitor.py)
- `response` (Response): HTTP response from internal `/health` API call.

# Variables for DB Session (session.py)
- `connect_args` (dict): Arguments for SQLAlchemy connection engine.
- `engine` (Engine): SQLAlchemy engine instance.
- `SessionLocal` (Session): FastAPI-scoped session factory.
- `Base` (DeclarativeMeta): SQLAlchemy declarative base.
- `db` (Session): Active DB session yielded per request.

# Variables for Plugin Controller (plugin_controller.py)
- `router` (APIRouter): FastAPI router instance for plugin endpoints.
- `plugin_class` (Type): Loaded plugin class used for execution.
- `executions` (List[PluginExecution]): Plugin execution logs from DB.

# Variables for Task Services (tasks.py)
- `plugin_exec` (PluginExecution): Plugin execution DB model instance.
- `query` (Query): SQLAlchemy query object reused in task filtering.

# Variables for API Router (__init__.py)
- `api_router` (APIRouter): Main application router aggregating all controllers.

# Variables for Task Services (tasks.py)
- `plugin_exec` (PluginExecution): Plugin execution DB model instance.
- `query` (Query): SQLAlchemy query object reused in task filtering.

# Variables for Config (config.py)
- `settings` (BaseSettings): Pydantic-configured global app settings.
- `model_config` (dict): Optional override values for Pydantic config.

# Variables for Error Handler (error_handler.py)
- `details` (str): Parsed detail message from exception.

# Variables for Deployment Handler (deployment_handler.py)
- `ssh_manager` (SSHManager): Remote SSH session for deployment.
- `logs_dir` (Path): Path where logs are stored on disk.
- `log_filename` (str): Name of the current log file.

# Variables for Task Controller (task_controller.py)
- `tasks` (List[Task]): List of tasks retrieved from database.

# Variables for Healing Controller (healing_controller.py)
- `lines` (List[str]): Log lines returned from healing monitor.

# Variables for Logs Controller (logs_controller.py)
- `file_path` (str): Full path to the deployment log file requested.

# Variables for Health Controller (health_controller.py)
- `is_model_ok` (bool): Flag indicating if core model is responsive.

# Variables for Healing Loop (healing_loop.py)
- `failed_tasks` (List[Task]): Tasks identified as failed and queued for healing.
